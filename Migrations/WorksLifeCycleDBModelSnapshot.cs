// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Works_Life_Cycle.Data;

#nullable disable

namespace Works_Life_Cycle.Migrations
{
    [DbContext(typeof(WorksLifeCycleDB))]
    partial class WorksLifeCycleDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "s",
                            ConcurrencyStamp = "ba77bd35-590b-4a43-879a-86506073dc74",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "t",
                            ConcurrencyStamp = "9729d5c1-6032-414a-affc-54cb8c2f3426",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "d7d3c06a-8a44-4ce1-8be4-0eeab1d15d52",
                            Name = "Secretary",
                            NormalizedName = "SECRETARY"
                        },
                        new
                        {
                            Id = "a",
                            ConcurrencyStamp = "c3aab8a5-c3f5-463e-b4f4-51484978ba0b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectTeacher", b =>
                {
                    b.Property<int>("ListofProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ListofTeachersId")
                        .HasColumnType("int");

                    b.HasKey("ListofProjectsProjectId", "ListofTeachersId");

                    b.HasIndex("ListofTeachersId");

                    b.ToTable("ProjectTeacher");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.AccessType", b =>
                {
                    b.Property<int>("AccessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessTypeId");

                    b.ToTable("AccessTypes");

                    b.HasData(
                        new
                        {
                            AccessTypeId = 1,
                            Name = "Acesso livre"
                        },
                        new
                        {
                            AccessTypeId = 2,
                            Name = "Acesso Embargado(1 ano)"
                        },
                        new
                        {
                            AccessTypeId = 3,
                            Name = "Acesso Embargado(2 ano)"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaID");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaID = 1,
                            Name = "Ciências Informáticas"
                        },
                        new
                        {
                            AreaID = 2,
                            Name = "História e Arqueologia"
                        },
                        new
                        {
                            AreaID = 3,
                            Name = "Finanças, Banca e Seguros"
                        },
                        new
                        {
                            AreaID = 4,
                            Name = "Artesanato"
                        },
                        new
                        {
                            AreaID = 5,
                            Name = "Turismo e Lazer"
                        },
                        new
                        {
                            AreaID = 6,
                            Name = "Design"
                        },
                        new
                        {
                            AreaID = 7,
                            Name = "Electrónica e Automação"
                        },
                        new
                        {
                            AreaID = 8,
                            Name = "Ciências Informáticas"
                        },
                        new
                        {
                            AreaID = 9,
                            Name = "Metalurgia e Metalomecânica"
                        },
                        new
                        {
                            AreaID = 10,
                            Name = "Gestão e Administração"
                        },
                        new
                        {
                            AreaID = 11,
                            Name = "Arquitectura e Urbanismo"
                        },
                        new
                        {
                            AreaID = 12,
                            Name = "Tecnologia dos Processos Químicos"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Collection", b =>
                {
                    b.Property<int>("CollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectionID");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            CollectionID = 1,
                            Name = "IPT - ESTT - Dissertações de Mestrado ou Doutoramento"
                        },
                        new
                        {
                            CollectionID = 2,
                            Name = "IPT - ESGT - Dissertações de Mestrado ou Doutoramento"
                        },
                        new
                        {
                            CollectionID = 3,
                            Name = "IPT - ESTA - Dissertações de Mestrado ou Doutoramento"
                        },
                        new
                        {
                            CollectionID = 4,
                            Name = "IPT - CGeo - Dissertações de Mestrado"
                        },
                        new
                        {
                            CollectionID = 5,
                            Name = "IPT - Ci2 - Dissertações de Mestrado"
                        },
                        new
                        {
                            CollectionID = 6,
                            Name = "IPT - Techn&Art - Dissertações de Mestrado"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"), 1L, 1);

                    b.Property<int?>("AreaFK")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CollectionFK")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganicUnitFK")
                        .HasColumnType("int");

                    b.Property<bool>("Partnership")
                        .HasColumnType("bit");

                    b.Property<int?>("SpecializationFK")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("AreaFK");

                    b.HasIndex("CollectionFK");

                    b.HasIndex("OrganicUnitFK");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseID = 1,
                            Code = "M932",
                            Name = "Analítica e Inteligência Organizacional",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 2,
                            Code = "6498",
                            Name = "Arqueologia Pré-Histórica e Arte Rupestre",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 3,
                            Code = "M925",
                            Name = "Auditoria e Finanças",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 4,
                            Code = "MB41",
                            Name = "Avaliação e Gestão de Ativos Imobiliários",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 5,
                            Code = "9405",
                            Name = "Conservação e Restauro",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 6,
                            Code = "M013",
                            Name = "Desenvolvimento de Produtos de Turismo Cultural",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 7,
                            Code = "M474",
                            Name = "Design Editorial",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 8,
                            Code = "M778",
                            Name = "Engenharia Eletrotécnica",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 9,
                            Code = "M909",
                            Name = "Engenharia Informática-Internet das Coisas",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 10,
                            Code = "M746",
                            Name = "Engenharia Mecânica - Projecto e Produção Mecânica",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 11,
                            Code = "9299",
                            Name = "Gestão de Recursos Humanos",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 12,
                            Code = "9295",
                            Name = "Gestão",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 13,
                            Code = "M199",
                            Name = "Reabilitação Urbana",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 14,
                            Code = "M079",
                            Name = "Tecnologia Química",
                            Partnership = false
                        },
                        new
                        {
                            CourseID = 15,
                            Code = "M197",
                            Name = "Técnicas de Arqueologia",
                            Partnership = false
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFK")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("ProjectFK");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.KeywordEn", b =>
                {
                    b.Property<int>("KeywordEnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordEnId"), 1L, 1);

                    b.Property<string>("KeywordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectFK")
                        .HasColumnType("int");

                    b.HasKey("KeywordEnId");

                    b.HasIndex("ProjectFK");

                    b.ToTable("KeywordEnglish");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.KeywordNative", b =>
                {
                    b.Property<int>("KeywordNativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordNativeId"), 1L, 1);

                    b.Property<string>("KeywordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageFK")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectFK")
                        .HasColumnType("int");

                    b.HasKey("KeywordNativeId");

                    b.HasIndex("LanguageFK");

                    b.HasIndex("ProjectFK");

                    b.ToTable("KeywordNative");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageID = 1,
                            Name = "Português"
                        },
                        new
                        {
                            LanguageID = 2,
                            Name = "Inglês"
                        },
                        new
                        {
                            LanguageID = 3,
                            Name = "Espanhol"
                        },
                        new
                        {
                            LanguageID = 4,
                            Name = "Alemão"
                        },
                        new
                        {
                            LanguageID = 5,
                            Name = "Francês"
                        },
                        new
                        {
                            LanguageID = 6,
                            Name = "Italiano"
                        },
                        new
                        {
                            LanguageID = 7,
                            Name = "Mirandês"
                        },
                        new
                        {
                            LanguageID = 8,
                            Name = "Japonês"
                        },
                        new
                        {
                            LanguageID = 9,
                            Name = "Chinês"
                        },
                        new
                        {
                            LanguageID = 10,
                            Name = "Outro"
                        },
                        new
                        {
                            LanguageID = 11,
                            Name = "N/A"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"), 1L, 1);

                    b.Property<string>("LicenseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenseId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            LicenseId = 1,
                            LicenseName = "Sem Licença"
                        },
                        new
                        {
                            LicenseId = 2,
                            LicenseName = "Atribuição (CC-BY)"
                        },
                        new
                        {
                            LicenseId = 3,
                            LicenseName = "Atribuição, Sem Trabalhos Derivados (CC-BY-ND)"
                        },
                        new
                        {
                            LicenseId = 4,
                            LicenseName = "Atribuição, Partilha nos Termos da Mesma Licença (CC-BY-SA)"
                        },
                        new
                        {
                            LicenseId = 5,
                            LicenseName = "Atribuição, Uso Não Comercial (CC-BY-NC)"
                        },
                        new
                        {
                            LicenseId = 6,
                            LicenseName = "Atribuição, Não Comercial, Sem Derivações (CC-BY-NC-ND)"
                        },
                        new
                        {
                            LicenseId = 7,
                            LicenseName = "Atribuição, Uso Não Comercial, Partilha nos Termos da Mesma Licença(CC - BY - NC - SA)"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationalityId"), 1L, 1);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            Acronym = "PT",
                            Name = "Portuguesa"
                        },
                        new
                        {
                            NationalityId = 2,
                            Acronym = "ES",
                            Name = "Espanhola"
                        },
                        new
                        {
                            NationalityId = 3,
                            Acronym = "UK",
                            Name = "Britânica"
                        },
                        new
                        {
                            NationalityId = 4,
                            Acronym = "FR",
                            Name = "Francesa"
                        },
                        new
                        {
                            NationalityId = 5,
                            Acronym = "DE",
                            Name = "Alemã"
                        },
                        new
                        {
                            NationalityId = 6,
                            Acronym = "NL",
                            Name = "Holandesa"
                        },
                        new
                        {
                            NationalityId = 7,
                            Acronym = "CH",
                            Name = "Suiça"
                        },
                        new
                        {
                            NationalityId = 8,
                            Acronym = "CZ",
                            Name = "Checa"
                        },
                        new
                        {
                            NationalityId = 9,
                            Acronym = "PL",
                            Name = "Polaca"
                        },
                        new
                        {
                            NationalityId = 10,
                            Acronym = "DK",
                            Name = "Dinamarquesa"
                        },
                        new
                        {
                            NationalityId = 11,
                            Acronym = "SE",
                            Name = "Sueca"
                        },
                        new
                        {
                            NationalityId = 12,
                            Acronym = "TR",
                            Name = "Turca"
                        },
                        new
                        {
                            NationalityId = 13,
                            Acronym = "IT",
                            Name = "Italiana"
                        },
                        new
                        {
                            NationalityId = 14,
                            Acronym = "US",
                            Name = "Americana"
                        },
                        new
                        {
                            NationalityId = 15,
                            Acronym = "RU",
                            Name = "Russa"
                        },
                        new
                        {
                            NationalityId = 16,
                            Acronym = "XX",
                            Name = "Outra"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.OrganicUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganicUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "ESTT",
                            Name = "Escola Superior de Tecnologia de Tomar"
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "ESGT",
                            Name = "Escola Superior de Gestão de Tomar"
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "ESTA",
                            Name = "Escola Superior de Tecnologia de Abrantes"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityFK")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UserNameID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityFK");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<string>("AbstractEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbstractPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccessTypeFK")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionFK")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DefenceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Handle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternalID")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageFK")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseFK")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolYearFK")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentFK")
                        .HasColumnType("int");

                    b.Property<int?>("TID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("AccessTypeFK");

                    b.HasIndex("CollectionFK");

                    b.HasIndex("CourseFK");

                    b.HasIndex("LanguageFK");

                    b.HasIndex("LicenseFK");

                    b.HasIndex("SchoolYearFK");

                    b.HasIndex("StudentFK");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.ProjectStudent", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<bool>("AcceptanceStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProjectStudents");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.ResearchProject", b =>
                {
                    b.Property<int>("ResearchProjectsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResearchProjectsID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectFK")
                        .HasColumnType("int");

                    b.HasKey("ResearchProjectsID");

                    b.HasIndex("ProjectFK");

                    b.ToTable("ResearchProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolYearId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYears");

                    b.HasData(
                        new
                        {
                            SchoolYearId = 1,
                            Name = "2019/2020"
                        },
                        new
                        {
                            SchoolYearId = 2,
                            Name = "2020/2021"
                        },
                        new
                        {
                            SchoolYearId = 3,
                            Name = "2021/2022"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CourseFK")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseFK");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sem especialização"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Área de especialização: Gestão do Património Cultural"
                        });
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Student", b =>
                {
                    b.HasBaseType("Works_Life_Cycle.Models.Person");

                    b.Property<int?>("CourseFK")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectFK")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("CourseFK");

                    b.HasIndex("ProjectFK");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Teacher", b =>
                {
                    b.HasBaseType("Works_Life_Cycle.Models.Person");

                    b.Property<bool>("External")
                        .HasColumnType("bit");

                    b.Property<string>("ORCID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhD")
                        .HasColumnType("bit");

                    b.Property<bool>("Specialist")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTeacher", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ListofProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Works_Life_Cycle.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("ListofTeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Course", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Area", "Area")
                        .WithMany("ListCourse")
                        .HasForeignKey("AreaFK");

                    b.HasOne("Works_Life_Cycle.Models.Collection", "Collection")
                        .WithMany("ListCourses")
                        .HasForeignKey("CollectionFK");

                    b.HasOne("Works_Life_Cycle.Models.OrganicUnit", "OrganicUnit")
                        .WithMany("Course")
                        .HasForeignKey("OrganicUnitFK");

                    b.Navigation("Area");

                    b.Navigation("Collection");

                    b.Navigation("OrganicUnit");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.File", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectFK");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.KeywordEn", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany("ListKeywordEnglish")
                        .HasForeignKey("ProjectFK");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.KeywordNative", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Language", "Language")
                        .WithMany("ListKeywordNative")
                        .HasForeignKey("LanguageFK");

                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany("ListKeywordNative")
                        .HasForeignKey("ProjectFK");

                    b.Navigation("Language");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Person", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Nationality", "Nationality")
                        .WithMany("ListofPersons")
                        .HasForeignKey("NationalityFK");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Project", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.AccessType", "AccessType")
                        .WithMany("ListProjects")
                        .HasForeignKey("AccessTypeFK");

                    b.HasOne("Works_Life_Cycle.Models.Collection", "Collection")
                        .WithMany("ListProjects")
                        .HasForeignKey("CollectionFK");

                    b.HasOne("Works_Life_Cycle.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseFK");

                    b.HasOne("Works_Life_Cycle.Models.Language", "Language")
                        .WithMany("ListProjects")
                        .HasForeignKey("LanguageFK");

                    b.HasOne("Works_Life_Cycle.Models.License", "License")
                        .WithMany("ListofProjects")
                        .HasForeignKey("LicenseFK");

                    b.HasOne("Works_Life_Cycle.Models.SchoolYear", "SchoolYear")
                        .WithMany("ListProjects")
                        .HasForeignKey("SchoolYearFK");

                    b.HasOne("Works_Life_Cycle.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentFK");

                    b.Navigation("AccessType");

                    b.Navigation("Collection");

                    b.Navigation("Course");

                    b.Navigation("Language");

                    b.Navigation("License");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.ProjectStudent", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Works_Life_Cycle.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.ResearchProject", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany("ResearchProjects")
                        .HasForeignKey("ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Specialization", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseFK");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Student", b =>
                {
                    b.HasOne("Works_Life_Cycle.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseFK");

                    b.HasOne("Works_Life_Cycle.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectFK");

                    b.Navigation("Course");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.AccessType", b =>
                {
                    b.Navigation("ListProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Area", b =>
                {
                    b.Navigation("ListCourse");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Collection", b =>
                {
                    b.Navigation("ListCourses");

                    b.Navigation("ListProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Language", b =>
                {
                    b.Navigation("ListKeywordNative");

                    b.Navigation("ListProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.License", b =>
                {
                    b.Navigation("ListofProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Nationality", b =>
                {
                    b.Navigation("ListofPersons");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.OrganicUnit", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.Project", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("ListKeywordEnglish");

                    b.Navigation("ListKeywordNative");

                    b.Navigation("ResearchProjects");
                });

            modelBuilder.Entity("Works_Life_Cycle.Models.SchoolYear", b =>
                {
                    b.Navigation("ListProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
